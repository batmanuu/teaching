# -*- coding: utf-8 -*-
"""Fila por prioridade_SO.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1qrnhPrFOxBBunJ8Hs8LiENdBf_19_8Pr
"""

class Processo:
    def __init__(self, id, prioridade):
        self.id = id
        self.prioridade = prioridade

def escalonamento_prioridade(processos, tempo):
    for t in range(tempo):  # Simula a execução
        print("---------------------")
        print(f"\nTempo {t}:")

        # Adiciona novo processo a cada tempo
        novo_processo = int(input(f"Digite a prioridade do Novo Processo no Tempo {t + 1} (ou -1 para nenhum): "))
        if novo_processo != -1:
            novo_processo_obj = Processo(len(processos) + 1, novo_processo)
            processos.append(novo_processo_obj)

        # Ordena os processos pela prioridade inicial
        processos.sort(key=lambda x: x.prioridade, reverse=True)

        # Exibe a fila de processos
        print("Fila de processos:")
        for processo in processos:
            print(f"Processo {processo.id} - Prioridade: {processo.prioridade}")

        # Executa o processo de maior prioridade
        if processos:
            processo_executando = processos.pop(0)
            print(f"\n Executando Processo {processo_executando.id} - Prioridade: {processo_executando.prioridade}")
        else:
            print("\n ///////////////////// Fim da fila de processos ////////////////////// -1")
            break  # Encerra o programa se a fila de processos estiver vazia
        print("--------------------")

# Solicita a quantidade de processos e a prioridade de cada um
num_processos = int(input("Digite a quantidade inicial de processos: "))
processos = []
for i in range(num_processos):
    prioridade = int(input(f"Digite a prioridade do Processo {i + 1}: "))
    processos.append(Processo(i + 1, prioridade))

temp = int(input(f"Unidades de tempo disponíveis para a simulação: "))
# Chama a função de escalonamento
escalonamento_prioridade(processos, temp)